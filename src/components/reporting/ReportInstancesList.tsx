
import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Download, Mail, Eye, Trash2, Search } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { reportingService, ReportInstance } from "@/services/reporting-service";

const ReportInstancesList: React.FC = () => {
  const [instances, setInstances] = useState<ReportInstance[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const { toast } = useToast();

  useEffect(() => {
    loadInstances();
  }, []);

  const loadInstances = async () => {
    try {
      setLoading(true);
      const data = await reportingService.getReportInstances();
      setInstances(data);
    } catch (error) {
      console.error('Error loading instances:', error);
      toast({ title: "Error", description: "Failed to load report instances", variant: "destructive" });
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadReport = async (instance: ReportInstance) => {
    // TODO: Implement PDF generation and download
    toast({ title: "Info", description: "PDF download feature coming soon" });
  };

  const handleEmailReport = async (instance: ReportInstance) => {
    // TODO: Implement email functionality
    toast({ title: "Info", description: "Email feature coming soon" });
  };

  const handleViewReport = (instance: ReportInstance) => {
    // TODO: Implement report viewer
    toast({ title: "Info", description: "Report viewer coming soon" });
  };

  const handleDeleteInstance = async (id: string) => {
    try {
      const { error } = await supabase
        .from('report_instances')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      toast({ title: "Success", description: "Report deleted successfully" });
      loadInstances();
    } catch (error) {
      console.error('Error deleting instance:', error);
      toast({ title: "Error", description: "Failed to delete report", variant: "destructive" });
    }
  };

  const filteredInstances = instances.filter(instance =>
    instance.instance_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'generated': return 'default';
      case 'draft': return 'secondary';
      case 'sent': return 'success';
      case 'failed': return 'destructive';
      default: return 'outline';
    }
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Report Instances</CardTitle>
          <CardDescription>Loading reports...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">Loading reports...</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Report Instances</CardTitle>
        <CardDescription>
          View and manage generated reports
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center gap-4 mb-6">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Search reports..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-9"
            />
          </div>
        </div>

        {filteredInstances.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <p>No reports found.</p>
          </div>
        ) : (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Report Name</TableHead>
                <TableHead>Generated By</TableHead>
                <TableHead>Generated Date</TableHead>
                <TableHead>Period</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredInstances.map((instance) => (
                <TableRow key={instance.id}>
                  <TableCell className="font-medium">{instance.instance_name}</TableCell>
                  <TableCell>{instance.generated_by_name || 'Unknown'}</TableCell>
                  <TableCell>
                    {new Date(instance.generation_date).toLocaleDateString()}
                  </TableCell>
                  <TableCell>
                    {instance.report_period_start && instance.report_period_end ? (
                      `${new Date(instance.report_period_start).toLocaleDateString()} - ${new Date(instance.report_period_end).toLocaleDateString()}`
                    ) : (
                      'N/A'
                    )}
                  </TableCell>
                  <TableCell>
                    <Badge variant={getStatusColor(instance.status) as any}>
                      {instance.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-1">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleViewReport(instance)}
                        title="View Report"
                      >
                        <Eye className="h-3 w-3" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDownloadReport(instance)}
                        title="Download PDF"
                      >
                        <Download className="h-3 w-3" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleEmailReport(instance)}
                        title="Email Report"
                      >
                        <Mail className="h-3 w-3" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDeleteInstance(instance.id)}
                        title="Delete Report"
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </CardContent>
    </Card>
  );
};

export default ReportInstancesList;
