
import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { FileText, Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import html2pdf from "html2pdf.js";

interface AuditPDFExportProps {
  orgId: string;
}

const AuditPDFExport: React.FC<AuditPDFExportProps> = ({ orgId }) => {
  const [selectedReport, setSelectedReport] = useState<string>("compliance_summary");
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const reportTypes = [
    { value: "compliance_summary", label: "Compliance Summary Report" },
    { value: "audit_findings", label: "Audit Findings Report" },
    { value: "task_status", label: "Task Status Report" },
    { value: "full_audit_trail", label: "Complete Audit Trail" }
  ];

  const generatePDFReport = async () => {
    setIsGenerating(true);
    try {
      const { auditService } = await import("@/services/audit-service");
      
      // Get data based on report type
      let reportData;
      let reportTitle;
      let reportContent;

      switch (selectedReport) {
        case "compliance_summary":
          const findings = await auditService.getComplianceFindings(orgId);
          const tasks = await auditService.getAuditTasks(orgId);
          reportTitle = "Compliance Summary Report";
          reportContent = generateComplianceSummaryHTML(findings, tasks);
          break;
          
        case "audit_findings":
          const findingsData = await auditService.getComplianceFindings(orgId);
          reportTitle = "Audit Findings Report";
          reportContent = generateAuditFindingsHTML(findingsData);
          break;
          
        case "task_status":
          const tasksData = await auditService.getAuditTasks(orgId);
          reportTitle = "Task Status Report";
          reportContent = generateTaskStatusHTML(tasksData);
          break;
          
        case "full_audit_trail":
          const auditTrail = await auditService.getAuditTrailByModule(orgId);
          reportTitle = "Complete Audit Trail";
          reportContent = generateAuditTrailHTML(auditTrail);
          break;
          
        default:
          throw new Error("Invalid report type");
      }

      // Create HTML template
      const htmlTemplate = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>${reportTitle}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
            .title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
            .subtitle { font-size: 14px; color: #666; }
            .section { margin-bottom: 30px; }
            .section-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #2563eb; }
            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 12px; }
            th { background-color: #f5f5f5; font-weight: bold; }
            .status-open { color: #dc2626; font-weight: bold; }
            .status-completed { color: #16a34a; font-weight: bold; }
            .severity-critical { color: #dc2626; font-weight: bold; }
            .severity-high { color: #ea580c; font-weight: bold; }
            .severity-medium { color: #ca8a04; font-weight: bold; }
            .severity-low { color: #16a34a; font-weight: bold; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; text-align: center; }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="title">${reportTitle}</div>
            <div class="subtitle">Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</div>
          </div>
          ${reportContent}
          <div class="footer">
            <p>This report was automatically generated by the Audit & Compliance Management System</p>
          </div>
        </body>
        </html>
      `;

      // Configure PDF options
      const options = {
        margin: 1,
        filename: `${reportTitle.replace(/\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
      };

      // Generate and download PDF
      await html2pdf().set(options).from(htmlTemplate).save();

      toast({
        title: "PDF Generated",
        description: "The audit report has been generated and downloaded successfully."
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        title: "Export failed",
        description: "There was an error generating the PDF report. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const generateComplianceSummaryHTML = (findings: any[], tasks: any[]) => {
    const openFindings = findings.filter(f => f.status === 'open');
    const completedFindings = findings.filter(f => f.status === 'completed');
    const overdueTasks = tasks.filter(t => new Date(t.due_date) < new Date() && t.status !== 'completed');

    return `
      <div class="section">
        <div class="section-title">Executive Summary</div>
        <table>
          <tr><td><strong>Total Findings:</strong></td><td>${findings.length}</td></tr>
          <tr><td><strong>Open Findings:</strong></td><td class="status-open">${openFindings.length}</td></tr>
          <tr><td><strong>Completed Findings:</strong></td><td class="status-completed">${completedFindings.length}</td></tr>
          <tr><td><strong>Total Tasks:</strong></td><td>${tasks.length}</td></tr>
          <tr><td><strong>Overdue Tasks:</strong></td><td class="status-open">${overdueTasks.length}</td></tr>
        </table>
      </div>
      
      <div class="section">
        <div class="section-title">Recent Open Findings</div>
        <table>
          <thead>
            <tr>
              <th>Reference</th>
              <th>Title</th>
              <th>Severity</th>
              <th>Module</th>
              <th>Due Date</th>
            </tr>
          </thead>
          <tbody>
            ${openFindings.slice(0, 10).map(f => `
              <tr>
                <td>${f.finding_reference}</td>
                <td>${f.finding_title}</td>
                <td class="severity-${f.severity}">${f.severity.toUpperCase()}</td>
                <td>${f.module_affected}</td>
                <td>${f.due_date ? new Date(f.due_date).toLocaleDateString() : 'Not set'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  const generateAuditFindingsHTML = (findings: any[]) => {
    return `
      <div class="section">
        <div class="section-title">All Compliance Findings</div>
        <table>
          <thead>
            <tr>
              <th>Reference</th>
              <th>Title</th>
              <th>Severity</th>
              <th>Module</th>
              <th>Status</th>
              <th>Assigned To</th>
              <th>Due Date</th>
            </tr>
          </thead>
          <tbody>
            ${findings.map(f => `
              <tr>
                <td>${f.finding_reference}</td>
                <td>${f.finding_title}</td>
                <td class="severity-${f.severity}">${f.severity.toUpperCase()}</td>
                <td>${f.module_affected}</td>
                <td class="status-${f.status}">${f.status.toUpperCase()}</td>
                <td>${f.assigned_to_name || 'Unassigned'}</td>
                <td>${f.due_date ? new Date(f.due_date).toLocaleDateString() : 'Not set'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  const generateTaskStatusHTML = (tasks: any[]) => {
    return `
      <div class="section">
        <div class="section-title">All Audit Tasks</div>
        <table>
          <thead>
            <tr>
              <th>Title</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Assigned To</th>
              <th>Due Date</th>
              <th>Completion Date</th>
            </tr>
          </thead>
          <tbody>
            ${tasks.map(t => `
              <tr>
                <td>${t.task_title}</td>
                <td class="severity-${t.priority}">${t.priority.toUpperCase()}</td>
                <td class="status-${t.status}">${t.status.toUpperCase()}</td>
                <td>${t.assigned_to_name || 'Unassigned'}</td>
                <td>${new Date(t.due_date).toLocaleDateString()}</td>
                <td>${t.completion_date ? new Date(t.completion_date).toLocaleDateString() : 'Not completed'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  const generateAuditTrailHTML = (auditTrail: any[]) => {
    return `
      <div class="section">
        <div class="section-title">Complete Audit Trail</div>
        <table>
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>Module</th>
              <th>Action</th>
              <th>Entity</th>
              <th>User</th>
              <th>Details</th>
            </tr>
          </thead>
          <tbody>
            ${auditTrail.slice(0, 50).map(trail => `
              <tr>
                <td>${new Date(trail.created_at).toLocaleDateString()} ${new Date(trail.created_at).toLocaleTimeString()}</td>
                <td>${trail.module_affected}</td>
                <td>${trail.status}</td>
                <td>${trail.finding_title}</td>
                <td>${trail.assigned_to_name || 'System'}</td>
                <td>${trail.finding_description ? trail.finding_description.substring(0, 100) + '...' : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          PDF Report Generator
        </CardTitle>
        <CardDescription>
          Generate comprehensive PDF reports for audit and compliance activities.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium">Report Type</label>
            <Select value={selectedReport} onValueChange={setSelectedReport}>
              <SelectTrigger className="mt-1">
                <SelectValue placeholder="Select report type" />
              </SelectTrigger>
              <SelectContent>
                {reportTypes.map((report) => (
                  <SelectItem key={report.value} value={report.value}>
                    {report.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <Button onClick={generatePDFReport} disabled={isGenerating} className="w-full">
            <Download className="h-4 w-4 mr-2" />
            {isGenerating ? "Generating PDF..." : "Generate PDF Report"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default AuditPDFExport;
