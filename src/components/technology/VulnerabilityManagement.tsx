
import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { 
  Bug, 
  Search,
  Filter,
  Calendar,
  Users,
  AlertCircle,
  Clock,
  CheckCircle,
  XCircle,
  TrendingUp
} from "lucide-react";

const VulnerabilityManagement = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedSeverity, setSelectedSeverity] = useState("all");

  // Mock vulnerability data
  const vulnerabilities = [
    {
      id: "CVE-2024-0001",
      title: "Remote Code Execution in Apache HTTP Server",
      severity: "critical",
      cvssScore: 9.8,
      discoveryDate: "2024-01-15",
      status: "open",
      affectedAssets: ["AST-001", "AST-003", "AST-007"],
      assignedTo: "Security Team",
      dueDate: "2024-01-22",
      remediation: "Apply security patch version 2.4.58"
    },
    {
      id: "CVE-2024-0002",
      title: "SQL Injection in Web Application Framework",
      severity: "high", 
      cvssScore: 8.9,
      discoveryDate: "2024-01-12",
      status: "in_progress",
      affectedAssets: ["AST-002", "AST-004"],
      assignedTo: "Development Team",
      dueDate: "2024-01-25",
      remediation: "Update framework to version 3.2.1"
    },
    {
      id: "CVE-2024-0003",
      title: "Cross-Site Scripting in Admin Panel",
      severity: "medium",
      cvssScore: 6.1,
      discoveryDate: "2024-01-10",
      status: "resolved",
      affectedAssets: ["AST-005"],
      assignedTo: "Web Team", 
      dueDate: "2024-01-20",
      remediation: "Input sanitization implemented"
    },
    {
      id: "CVE-2024-0004",
      title: "Information Disclosure in API Endpoint",
      severity: "low",
      cvssScore: 3.7,
      discoveryDate: "2024-01-08",
      status: "accepted",
      affectedAssets: ["AST-006"],
      assignedTo: "API Team",
      dueDate: "2024-02-08",
      remediation: "Risk accepted - low impact"
    }
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "destructive";
      case "high": return "secondary";
      case "medium": return "outline";
      case "low": return "outline";
      default: return "outline";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open": return "bg-red-100 text-red-800";
      case "in_progress": return "bg-yellow-100 text-yellow-800";
      case "resolved": return "bg-green-100 text-green-800";
      case "accepted": return "bg-blue-100 text-blue-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "open": return <AlertCircle className="h-4 w-4" />;
      case "in_progress": return <Clock className="h-4 w-4" />;
      case "resolved": return <CheckCircle className="h-4 w-4" />;
      case "accepted": return <XCircle className="h-4 w-4" />;
      default: return <AlertCircle className="h-4 w-4" />;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.id.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = selectedSeverity === "all" || vuln.severity === selectedSeverity;
    return matchesSearch && matchesSeverity;
  });

  const vulnerabilityStats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === "critical").length,
    high: vulnerabilities.filter(v => v.severity === "high").length,
    medium: vulnerabilities.filter(v => v.severity === "medium").length,
    low: vulnerabilities.filter(v => v.severity === "low").length,
    open: vulnerabilities.filter(v => v.status === "open").length,
    inProgress: vulnerabilities.filter(v => v.status === "in_progress").length,
    resolved: vulnerabilities.filter(v => v.status === "resolved").length
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Vulnerability Management</h2>
          <p className="text-muted-foreground">
            Track, assess, and remediate security vulnerabilities
          </p>
        </div>
        <Button className="flex items-center gap-2">
          <Bug className="h-4 w-4" />
          Run Scan
        </Button>
      </div>

      {/* Vulnerability Statistics */}
      <div className="grid gap-4 md:grid-cols-5">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Total</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{vulnerabilityStats.total}</div>
            <div className="text-sm text-muted-foreground">Active vulnerabilities</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-red-600">Critical</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{vulnerabilityStats.critical}</div>
            <div className="text-sm text-muted-foreground">Immediate action</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-orange-600">High</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{vulnerabilityStats.high}</div>
            <div className="text-sm text-muted-foreground">Priority remediation</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-yellow-600">Medium</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">{vulnerabilityStats.medium}</div>
            <div className="text-sm text-muted-foreground">Scheduled fix</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-blue-600">Low</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{vulnerabilityStats.low}</div>
            <div className="text-sm text-muted-foreground">Monitor</div>
          </CardContent>
        </Card>
      </div>

      {/* Remediation Progress */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            Remediation Progress
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Open Vulnerabilities</span>
                <span>{vulnerabilityStats.open}/{vulnerabilityStats.total}</span>
              </div>
              <Progress value={(vulnerabilityStats.open / vulnerabilityStats.total) * 100} className="h-2" />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>In Progress</span>
                <span>{vulnerabilityStats.inProgress}/{vulnerabilityStats.total}</span>
              </div>
              <Progress value={(vulnerabilityStats.inProgress / vulnerabilityStats.total) * 100} className="h-2" />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Resolved</span>
                <span>{vulnerabilityStats.resolved}/{vulnerabilityStats.total}</span>
              </div>
              <Progress value={(vulnerabilityStats.resolved / vulnerabilityStats.total) * 100} className="h-2" />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Vulnerability List */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Vulnerability Tracking</CardTitle>
            <div className="flex items-center gap-2">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search vulnerabilities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9 w-64"
                />
              </div>
              <Button variant="outline" size="sm">
                <Filter className="h-4 w-4 mr-2" />
                Filter
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {filteredVulnerabilities.map((vuln) => (
              <div key={vuln.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                <div className="flex items-center gap-4">
                  <div className="p-2 bg-red-100 rounded-lg">
                    <Bug className="h-4 w-4 text-red-600" />
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <div className="font-medium">{vuln.title}</div>
                      <Badge variant={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      <Badge variant="outline">CVSS {vuln.cvssScore}</Badge>
                    </div>
                    <div className="text-sm text-muted-foreground">{vuln.id}</div>
                    <div className="flex items-center gap-4 text-sm text-muted-foreground">
                      <span className="flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        Discovered: {vuln.discoveryDate}
                      </span>
                      <span className="flex items-center gap-1">
                        <Users className="h-3 w-3" />
                        {vuln.assignedTo}
                      </span>
                      <span>{vuln.affectedAssets.length} affected assets</span>
                    </div>
                  </div>
                </div>
                
                <div className="text-right space-y-2">
                  <div className="flex items-center gap-2">
                    <Badge className={getStatusColor(vuln.status)}>
                      {getStatusIcon(vuln.status)}
                      <span className="ml-1">{vuln.status.replace('_', ' ')}</span>
                    </Badge>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    Due: {vuln.dueDate}
                  </div>
                  <div className="text-xs text-muted-foreground max-w-xs">
                    {vuln.remediation}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityManagement;
