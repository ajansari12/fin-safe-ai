
import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Loader2, Sparkles, AlertTriangle, Clock } from "lucide-react";
import { getIncidents } from "@/services/incident-service";
import { toast } from "sonner";

interface GeneratedScenario {
  title: string;
  description: string;
  disruption_type: string;
  severity_level: string;
  response_plan?: string;
  lessons_learned?: string;
  estimated_duration: number;
  steps: Array<{
    step: number;
    name: string;
    description: string;
    duration: number;
  }>;
}

interface AIScenarioGeneratorProps {
  onScenarioGenerated: (scenario: GeneratedScenario) => void;
}

const AIScenarioGenerator: React.FC<AIScenarioGeneratorProps> = ({ onScenarioGenerated }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedIncident, setSelectedIncident] = useState<string>('');
  const [customPrompt, setCustomPrompt] = useState('');
  const [generationType, setGenerationType] = useState<'incident' | 'custom'>('incident');

  const { data: incidents = [], isLoading } = useQuery({
    queryKey: ['incidents'],
    queryFn: getIncidents
  });

  const recentIncidents = incidents
    .filter(incident => incident.status === 'resolved')
    .slice(0, 10);

  const generateScenario = async () => {
    setIsGenerating(true);
    
    try {
      let prompt = '';
      
      if (generationType === 'incident' && selectedIncident) {
        const incident = incidents.find(i => i.id === selectedIncident);
        if (incident) {
          prompt = `Based on this resolved incident: "${incident.title}" - ${incident.description}, generate a comprehensive scenario test that would help prepare for similar future incidents. Include realistic timelines, response steps, and recovery procedures.`;
        }
      } else if (generationType === 'custom' && customPrompt) {
        prompt = `Generate a scenario test based on: ${customPrompt}. Include realistic timelines, response steps, and recovery procedures.`;
      }

      if (!prompt) {
        toast.error("Please provide input for scenario generation");
        return;
      }

      // Simulate AI generation (in real implementation, this would call an AI service)
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock generated scenario
      const generatedScenario: GeneratedScenario = {
        title: "AI Generated Scenario Test",
        description: "This scenario was generated based on your input to test organizational resilience and response capabilities.",
        disruption_type: "Cyberattack",
        severity_level: "high",
        estimated_duration: 480,
        response_plan: "Comprehensive response plan generated by AI analysis",
        lessons_learned: "Key lessons identified from similar incidents",
        steps: [
          { step: 1, name: "Incident Detection", description: "Detect and confirm the incident", duration: 15 },
          { step: 2, name: "Initial Response", description: "Execute immediate response procedures", duration: 30 },
          { step: 3, name: "Assessment", description: "Assess impact and scope", duration: 60 },
          { step: 4, name: "Containment", description: "Contain the incident to prevent spread", duration: 120 },
          { step: 5, name: "Recovery", description: "Execute recovery procedures", duration: 240 },
          { step: 6, name: "Post-Incident", description: "Conduct post-incident review", duration: 15 }
        ]
      };

      onScenarioGenerated(generatedScenario);
      toast.success("Scenario generated successfully!");
      
    } catch (error) {
      toast.error("Failed to generate scenario");
      console.error('Error generating scenario:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-primary" />
          AI Scenario Generator
        </CardTitle>
        <CardDescription>
          Generate realistic scenario tests based on past incidents or custom requirements
        </CardDescription>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <div>
          <Label htmlFor="generation-type">Generation Type</Label>
          <Select value={generationType} onValueChange={(value: 'incident' | 'custom') => setGenerationType(value)}>
            <SelectTrigger>
              <SelectValue placeholder="Select generation type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="incident">Based on Past Incident</SelectItem>
              <SelectItem value="custom">Custom Scenario</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {generationType === 'incident' && (
          <div>
            <Label htmlFor="incident-select">Select Resolved Incident</Label>
            <Select value={selectedIncident} onValueChange={setSelectedIncident}>
              <SelectTrigger>
                <SelectValue placeholder="Choose an incident to base scenario on" />
              </SelectTrigger>
              <SelectContent>
                {recentIncidents.map((incident) => (
                  <SelectItem key={incident.id} value={incident.id}>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="text-xs">
                        {incident.severity}
                      </Badge>
                      <span className="truncate">{incident.title}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {selectedIncident && (
              <div className="mt-2 p-3 bg-muted rounded-md">
                {(() => {
                  const incident = incidents.find(i => i.id === selectedIncident);
                  return incident ? (
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4" />
                        <span className="font-medium">{incident.title}</span>
                        <Badge variant="outline">{incident.severity}</Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">{incident.description}</p>
                      {incident.resolved_at && (
                        <div className="flex items-center gap-1 text-xs text-muted-foreground">
                          <Clock className="h-3 w-3" />
                          Resolved: {new Date(incident.resolved_at).toLocaleDateString()}
                        </div>
                      )}
                    </div>
                  ) : null;
                })()}
              </div>
            )}
          </div>
        )}

        {generationType === 'custom' && (
          <div>
            <Label htmlFor="custom-prompt">Custom Scenario Prompt</Label>
            <Textarea
              id="custom-prompt"
              value={customPrompt}
              onChange={(e) => setCustomPrompt(e.target.value)}
              placeholder="Describe the type of scenario you want to generate... (e.g., 'A major cloud provider outage affecting our primary business systems during peak trading hours')"
              rows={4}
            />
          </div>
        )}

        <Button 
          onClick={generateScenario}
          disabled={isGenerating || (generationType === 'incident' && !selectedIncident) || (generationType === 'custom' && !customPrompt)}
          className="w-full"
        >
          {isGenerating ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Generating Scenario...
            </>
          ) : (
            <>
              <Sparkles className="h-4 w-4 mr-2" />
              Generate Scenario
            </>
          )}
        </Button>

        <div className="p-3 bg-blue-50 rounded-md border border-blue-200">
          <p className="text-sm text-blue-800">
            <strong>AI Enhancement:</strong> The AI will analyze the selected incident or prompt to create a comprehensive scenario test including realistic timelines, response procedures, and success criteria.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default AIScenarioGenerator;
